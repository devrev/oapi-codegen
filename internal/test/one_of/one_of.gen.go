// Package one_of provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.0.0-00010101000000-000000000000 DO NOT EDIT.
package one_of

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
)

// Defines values for DateTimePresetValueType.
const (
	AfterNDays   DateTimePresetValueType = "after_n_days"
	AfterNHours  DateTimePresetValueType = "after_n_hours"
	BeforeNDays  DateTimePresetValueType = "before_n_days"
	BeforeNHours DateTimePresetValueType = "before_n_hours"
	LastNDays    DateTimePresetValueType = "last_n_days"
	LastNHours   DateTimePresetValueType = "last_n_hours"
)

// DateTimePreset defines model for date-time-preset.
type DateTimePreset struct {
	ValueType DateTimePresetValueType `json:"value_type"`
	union     json.RawMessage
}

// DateTimePresetValueType defines model for date-time-preset-value-type.
type DateTimePresetValueType string

// Day defines model for day.
type Day struct {
	Value     string `json:"value"`
	ValueType string `json:"value_type"`
}

// Hour defines model for hour.
type Hour struct {
	Value     int32  `json:"value"`
	ValueType string `json:"value_type"`
}

// PostConfigJSONRequestBody defines body for PostConfig for application/json ContentType.
type PostConfigJSONRequestBody = DateTimePreset

// AsDay returns the union data inside the DateTimePreset as a Day
func (t DateTimePreset) AsDay() (Day, error) {
	var body Day
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromDay overwrites any union data inside the DateTimePreset as the provided Day
func (t *DateTimePreset) FromDay(v Day) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeDay performs a merge with any union data inside the DateTimePreset, using the provided Day
func (t *DateTimePreset) MergeDay(v Day) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsHour returns the union data inside the DateTimePreset as a Hour
func (t DateTimePreset) AsHour() (Hour, error) {
	var body Hour
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromHour overwrites any union data inside the DateTimePreset as the provided Hour
func (t *DateTimePreset) FromHour(v Hour) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeHour performs a merge with any union data inside the DateTimePreset, using the provided Hour
func (t *DateTimePreset) MergeHour(v Hour) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DateTimePreset) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"value_type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t DateTimePreset) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "after_n_days":
		return t.AsDay()
	case "after_n_hours":
		return t.AsHour()
	case "before_n_days":
		return t.AsDay()
	case "before_n_hours":
		return t.AsHour()
	case "last_n_days":
		return t.AsDay()
	case "last_n_hours":
		return t.AsHour()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t DateTimePreset) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["value_type"], err = json.Marshal(t.ValueType)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'value_type': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *DateTimePreset) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["value_type"]; found {
		err = json.Unmarshal(raw, &t.ValueType)
		if err != nil {
			return fmt.Errorf("error reading 'value_type': %w", err)
		}
	}

	return err
}
